# Generated by Django 3.0.1 on 2020-03-20 06:57

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import testapp.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_type', models.IntegerField(choices=[(9000, '이메일 유저'), (9001, '구글 유저'), (9002, '페이스북 유저')], default=9000, verbose_name='가입한 방식')),
                ('user_uid', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('password', models.CharField(max_length=200, verbose_name='password')),
                ('nickname', models.CharField(max_length=150)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='usr')),
                ('joined_date', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_public', models.BooleanField(default=True)),
                ('is_login', models.BooleanField(default=False)),
                ('modify_date', models.DateTimeField(blank=True, null=True)),
                ('recent_search', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', testapp.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AppNotices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, unique=True, verbose_name='공지사항 타이틀')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('contents_url', models.CharField(max_length=200, verbose_name='공지사항 내용')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_problem', models.BooleanField(default=False)),
                ('contents', models.TextField(verbose_name='내용')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modify_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='HashTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True, verbose_name='태그명')),
                ('is_tag', models.BooleanField(default=True)),
                ('count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_kind', models.IntegerField(choices=[(200, '일반 게시물'), (201, '관리자 게시물')], default=200, verbose_name='카테고리')),
                ('posts_image', models.ImageField(upload_to='post')),
                ('back_image', models.ImageField(blank=True, null=True, upload_to='postb')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('contents', models.TextField(default='', verbose_name='내용')),
                ('views', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modify_date', models.DateTimeField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=True)),
                ('handling', models.IntegerField(choices=[(22000, '검사 전'), (22001, '사진 통과'), (22002, '잘못된 위치정보'), (22003, '부적절한 사진'), (22004, '부적절한 내용')], default=22000, verbose_name='검사')),
                ('problem', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('like_count', models.IntegerField(default=0)),
                ('reason_detail', models.TextField(default='', verbose_name='반려 사유 작성란')),
                ('comment', models.ManyToManyField(related_name='get_comment', through='testapp.Comment', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Scrapt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_scrap', to='testapp.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_scrap', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_date',),
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('handling', models.IntegerField(choices=[(0, '신고 x'), (1, '게시물 전'), (2, '게시물 후'), (3, '댓글 전'), (4, '댓글 후')], default=0, verbose_name='신고처리')),
                ('post_url', models.CharField(default='null', max_length=200, verbose_name='이미지')),
                ('post_caption', models.TextField(default='null', verbose_name='게시물 내용')),
                ('comment_contents', models.TextField(default='null', verbose_name='댓글')),
                ('reason', models.IntegerField(choices=[(0, '기타'), (1, '스팸'), (2, '욕설 및 비방'), (3, '음란물'), (4, '무단도용')], default=-1)),
                ('detail', models.TextField(default='', verbose_name='상세내용')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('reason_detail', models.TextField(default='', verbose_name='사유 작성란')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='testapp_report_comment_related', to='testapp.Comment')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='phopo_reports_post_related', to='testapp.Post')),
                ('reporter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='testapp_report_reporter_related', to=settings.AUTH_USER_MODEL, to_field='user_uid')),
            ],
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_posttag', to='testapp.Post')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_posttag', to='testapp.HashTag')),
            ],
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_like', to='testapp.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_like', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='hashtag',
            field=models.ManyToManyField(related_name='get_hashtag', through='testapp.PostTag', to='testapp.HashTag'),
        ),
        migrations.AddField(
            model_name='post',
            name='like_user',
            field=models.ManyToManyField(related_name='get_like', through='testapp.PostLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='post',
            name='scrap_users',
            field=models.ManyToManyField(related_name='get_scrap', through='testapp.Scrapt', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='post',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='get_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.IntegerField(choices=[(22001, '사진 반려'), (22002, '사진 통과'), (22003, '댓글 남김'), (22004, '규칙 위반 게시물'), (22005, '규칙 위반 댓글')], verbose_name='알림 종류')),
                ('confirmation', models.BooleanField(default=False, verbose_name='확인')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='testapp_notice_comment_related', to='testapp.Comment')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='testapp_notice_post_related', to='testapp.Post')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testapp_notice_receiver_related', to=settings.AUTH_USER_MODEL)),
                ('report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='testapp_notice_report_related', to='testapp.Report')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_comment', to='testapp.Post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_comment', to=settings.AUTH_USER_MODEL),
        ),
    ]
